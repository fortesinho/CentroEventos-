@page "/eventos/modificar/{id:int}"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion.CasosDeUso
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.Interfaces
@inject EventoDeportivoModificacionUseCase modificacionUseCase
@inject EventoDeportivoListadoUseCase listadoUseCase
@inject NavigationManager nav
@inject IServicioAutorizacion autorizacion

<h3>Modificar Evento Deportivo</h3>

@if (!autorizacion.PoseeElPermiso(Permiso.EventoModificacion))
{
    <p class="text-danger">No tenés permiso para modificar eventos.</p>
}
else if (evento == null)
{
    <p class="text-warning">Cargando evento...</p>
}
else
{
    @if (!string.IsNullOrWhiteSpace(error))
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }

    <EditForm OnValidSubmit="Modificar" Model="@evento">
        <label>Nombre</label>
        <InputText @bind-Value="evento.Nombre" placeholder="Nombre del evento" class="form-control mb-2" />

        <label>Descripción</label>
        <InputText @bind-Value="evento.Descripcion" placeholder="Descripción breve" class="form-control mb-2" />

        <label>Fecha</label>
        <InputDate @bind-Value="fecha" class="form-control mb-2" />

        <label>Hora</label>
        <input type="time" class="form-control mb-2" value="@horaString" @onchange="OnHoraChanged" />

        <label>Duración (horas)</label>
        <InputNumber @bind-Value="evento.DuracionHoras" placeholder="Ej: 1.5" class="form-control mb-2" />

        <label>Cupo Máximo</label>
        <InputNumber @bind-Value="evento.CupoMaximo" placeholder="Cantidad máxima de asistentes" class="form-control mb-2" />

        <label>ID del Responsable</label>
        <InputNumber @bind-Value="evento.ResponsableId" placeholder="ID de la persona responsable" class="form-control mb-2" />

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter] public int id { get; set; }
    EventoDeportivo? evento;
    string error = "";
    DateTime fecha = DateTime.Today;
    string horaString = "12:00";

    protected override void OnInitialized()
    {
        evento = listadoUseCase.Ejecutar().FirstOrDefault(e => e.Id == id);
        if (evento != null)
        {
            // Inicializo fecha y hora a partir de FechaHoraInicio
            fecha = evento.FechaHoraInicio.Date;
            horaString = evento.FechaHoraInicio.ToString("HH:mm");
        }
    }

    void OnHoraChanged(ChangeEventArgs e)
    {
        horaString = e.Value?.ToString() ?? "12:00";
    }

    void Modificar()
    {
        try
        {
            // Combino fecha y hora antes de guardar
            var partes = horaString.Split(':');
            int horas = int.Parse(partes[0]);
            int minutos = int.Parse(partes[1]);
            evento!.FechaHoraInicio = fecha.Date.AddHours(horas).AddMinutes(minutos);

            modificacionUseCase.Ejecutar(evento);
            nav.NavigateTo("/eventos");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void Cancelar()
    {
        nav.NavigateTo("/eventos");
    }
}