@page "/usuarios/alta"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion.CasosDeUso.UsuarioCasosDeUso
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.Interfaces
@inject UsuarioAltaUseCase altaUseCase
@inject NavigationManager nav
@inject IServicioAutorizacion autorizacion

<h3>Agregar Usuario</h3>

@if (!autorizacion.PoseeElPermiso(Permiso.UsuarioAlta))
{
    <p class="text-danger">No tenés permiso para crear usuarios.</p>
}
else
{
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }

    <EditForm Model="@usuario" OnValidSubmit="Guardar">
        <InputText @bind-Value="usuario.Nombre" placeholder="Nombre" class="form-control mb-2" />
        <InputText @bind-Value="usuario.Apellido" placeholder="Apellido" class="form-control mb-2" />
        <InputText @bind-Value="usuario.Email" placeholder="Email" class="form-control mb-2" />
        <InputText @bind-Value="contraseña" placeholder="Contraseña" type="password" class="form-control mb-2" />

        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}

<button @onclick="IrMenu">Volver al menú</button>

@code {
    Usuario usuario = new Usuario();
    string contraseña = "";
    string error = "";

    void Guardar()
    {
        try
        {
            usuario.ContraseñaHash = CalculadorHash.CalcularSha256(contraseña);
            altaUseCase.Ejecutar(usuario,contraseña);

            // Navegar a listado sin afectar sesión
            nav.NavigateTo("/usuarios");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void Cancelar()
    {
        nav.NavigateTo("/usuarios");
    }

    void IrMenu()
    {
        nav.NavigateTo("/menu");
    }
}using CentroEventos.Aplicacion.Servicios;
#line default
